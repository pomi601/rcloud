const std = @import("std");
const Build = std.Build;
const Step = Build.Step;
const Compile = Step.Compile;
const Run = Step.Run;
const UpdateSourceFiles = Step.UpdateSourceFiles;
const WriteFile = Step.WriteFile;
const ResolvedTarget = Build.ResolvedTarget;
const OptimizeMode = std.builtin.OptimizeMode;

// import build tools from r_build_zig
const r_build_zig = @import("r-build-zig");

// import generated build.zig
const generated_build = @import("build-aux/generated/build.zig");

pub fn build(b: *std.Build) !void {
    // const buf: [std.mem.page_size]u8 = undefined;
    const target = b.standardTargetOptions(.{});
    const optimize = b.standardOptimizeOption(.{});
    const config_path = b.pathJoin(&.{ "build-aux", "config.json" });

    // additional steps
    const update_step = b.step("update", "Generate R package build files");
    const tarball_step = b.step("dist", "Make a source archive");

    // declare build install rules
    try fetch_assets_and_build(b, config_path, target, optimize);

    // declare step: update
    try generate_build_script(
        b,
        config_path,
        &.{ // dirs relative to this build.zig file, and no trailing slashes
            "packages",
            "rcloud.client",
            "rcloud.packages",
            "rcloud.support",
        },
        update_step,
        target,
        optimize,
    );

    // declare step: dist
    try make_tarball(b, tarball_step);
}

/// Declare steps which fetch external assets and declare the rules
/// generated by the generate-build tool.
fn fetch_assets_and_build(
    b: *Build,
    config_path: []const u8,
    target: ResolvedTarget,
    optimize: OptimizeMode,
) !void {

    // get the fetch-assets tool
    const exe = b.dependency("r-build-zig", .{
        .target = target,
        .optimize = optimize,
    }).artifact("fetch-assets");

    // run it
    const step = b.addRunArtifact(exe);
    _ = step.addArg(config_path);
    const out_dir = step.addOutputDirectoryArg("assets");

    // supply output directory to build rule declarations
    try generated_build.build(b, out_dir);
}

/// Declare steps which generate a new build script given a
/// configuration file and list of source package directories relative
/// to this script (in the project root).
fn generate_build_script(
    b: *Build,
    config_path: []const u8,
    relative_source_package_paths: []const []const u8,
    update_step: *Step,
    target: ResolvedTarget,
    optimize: OptimizeMode,
) !void {
    const exe = b.dependency("r-build-zig", .{
        .target = target,
        .optimize = optimize,
    }).artifact("generate-build");

    // arguments: config_file out_dir package_dirs...
    const step = b.addRunArtifact(exe);
    _ = step.addArg(config_path);

    // by using a temp directory here, we ensure the results of this
    // step are never cached.
    // const out_dir = step.addOutputDirectoryArg(b.makeTempPath());
    const out_dir = step.addOutputDirectoryArg("deps");
    for (relative_source_package_paths) |path| {
        _ = step.addArg(path);
    }

    // copy the generated build.zig file to build-aux directory
    const uf = b.addUpdateSourceFiles();
    uf.addCopyFileToSource(out_dir.path(b, "build.zig"), "build-aux/generated/build.zig");

    update_step.dependOn(&uf.step);
}

fn make_tarball(
    b: *Build,
    step: *Step,
) !void {
    const version = try read_version_file(b.allocator);
    const dirname = b.fmt("rcloud-{s}", .{version});
    const tarname = b.fmt("rcloud-{s}.tar.gz", .{version});

    const wf = b.addWriteFiles();
    const tar = b.addSystemCommand(&.{ "tar", "czf" });
    tar.setCwd(wf.getDirectory());
    const tar_out = tar.addOutputFileArg(tarname);
    _ = tar.addArg(dirname);
    add_all_source_files(b, wf, dirname);

    const tar_install = b.addInstallFileWithDir(tar_out, .prefix, tarname);
    step.dependOn(&tar_install.step);
}

fn add_all_source_files(b: *Build, wf: *WriteFile, dirname: []const u8) void {
    const options = WriteFile.Directory.Options{
        .exclude_extensions = &.{},
    };

    _ = add_copy_directory(b, wf, "build-aux", dirname, options);
    _ = add_copy_directory(b, wf, "conf", dirname, options);
    _ = add_copy_directory(b, wf, "doc", dirname, options);
    _ = add_copy_directory(b, wf, "docker", dirname, options);
    _ = add_copy_directory(b, wf, "htdocs", dirname, options);
    _ = add_copy_directory(b, wf, "m4", dirname, options);
    _ = add_copy_directory(b, wf, "packages", dirname, options);
    _ = add_copy_directory(b, wf, "rcloud.client", dirname, options);
    _ = add_copy_directory(b, wf, "rcloud.packages", dirname, options);
    _ = add_copy_directory(b, wf, "rcloud.support", dirname, options);
    _ = add_copy_directory(b, wf, "scripts", dirname, options);
    _ = add_copy_directory(b, wf, "services", dirname, options);
    _ = add_copy_directory(b, wf, "vendor", dirname, options);
    _ = add_copy_directory(b, wf, "packages", dirname, options);

    _ = add_copy_file(b, wf, "build.zig", dirname);
    _ = add_copy_file(b, wf, "build.zig.zon", dirname);
    _ = add_copy_file(b, wf, "flake.lock", dirname);
    _ = add_copy_file(b, wf, "flake.nix", dirname);
    _ = add_copy_file(b, wf, "Gruntfile.js", dirname);
    _ = add_copy_file(b, wf, "LICENSE", dirname);
    _ = add_copy_file(b, wf, "NEWS.md", dirname);
    _ = add_copy_file(b, wf, "package.json", dirname);
    _ = add_copy_file(b, wf, "package-lock.json", dirname);
    _ = add_copy_file(b, wf, "README.md", dirname);
    _ = add_copy_file(b, wf, "VERSION", dirname);
}

fn add_copy_directory(
    b: *Build,
    wf: *WriteFile,
    name: []const u8,
    root: []const u8,
    options: WriteFile.Directory.Options,
) void {
    _ = wf.addCopyDirectory(b.path(name), b.fmt("{s}/{s}", .{ root, name }), options);
}

fn add_copy_file(b: *Build, wf: *WriteFile, name: []const u8, root: []const u8) void {
    _ = wf.addCopyFile(b.path(name), b.fmt("{s}/{s}", .{ root, name }));
}

fn read_version_file(alloc: std.mem.Allocator) ![]const u8 {
    const file = try std.fs.cwd().openFile("VERSION", .{});
    defer file.close();
    const content = try file.readToEndAlloc(alloc, 1024);
    var i: usize = 0;
    while (i < content.len) : (i += 1) {
        if (content[i] == '\n') return content[0..i];
    }
    return content;
}
