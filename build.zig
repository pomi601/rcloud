const std = @import("std");
const Build = std.Build;
const Step = Build.Step;
const Compile = Step.Compile;
const Run = Step.Run;
const UpdateSourceFiles = Step.UpdateSourceFiles;
const ResolvedTarget = Build.ResolvedTarget;
const OptimizeMode = std.builtin.OptimizeMode;

// import build tools from r_build_zig
const r_build_zig = @import("r-build-zig");

// import generated build.zig
const generated_build = @import("build-aux/generated/build.zig");

pub fn build(b: *std.Build) !void {
    // const buf: [std.mem.page_size]u8 = undefined;
    const target = b.standardTargetOptions(.{});
    const optimize = b.standardOptimizeOption(.{});
    const config_path = b.pathJoin(&.{ "build-aux", "config.json" });

    // additional steps
    const update_step = b.step("update", "Generate R package build files");

    // declare build install rules
    try fetch_assets_and_build(b, config_path, target, optimize);

    // declare step: update
    try generate_build_script(
        b,
        config_path,
        &.{ // relative to this file, and no trailing slashes
            "packages",
            "rcloud.client",
            "rcloud.packages",
            "rcloud.support",
        },
        update_step,
        target,
        optimize,
    );
}

/// Declare steps which fetch external assets and declare the rules
/// generated by the generate-build tool.
fn fetch_assets_and_build(
    b: *Build,
    config_path: []const u8,
    target: ResolvedTarget,
    optimize: OptimizeMode,
) !void {

    // get the fetch-assets tool
    const exe = b.dependency("r-build-zig", .{
        .target = target,
        .optimize = optimize,
    }).artifact("fetch-assets");

    // run it
    const step = b.addRunArtifact(exe);
    _ = step.addArg(config_path);
    const out_dir = step.addOutputDirectoryArg("assets");

    // supply output directory to build rule declarations
    try generated_build.build(b, out_dir);
}

/// Declare steps which generate a new build script given a
/// configuration file and list of source package directories relative
/// to this script (in the project root).
fn generate_build_script(
    b: *Build,
    config_path: []const u8,
    relative_source_package_paths: []const []const u8,
    updateStep: *Step,
    target: ResolvedTarget,
    optimize: OptimizeMode,
) !void {
    const exe = b.dependency("r-build-zig", .{
        .target = target,
        .optimize = optimize,
    }).artifact("generate-build");

    // arguments: config_file out_dir package_dirs...
    const step = b.addRunArtifact(exe);
    _ = step.addArg(config_path);

    // by using a temp directory here, we ensure the results of this
    // step are never cached.
    // const out_dir = step.addOutputDirectoryArg(b.makeTempPath());
    const out_dir = step.addOutputDirectoryArg("deps");
    for (relative_source_package_paths) |path| {
        _ = step.addArg(path);
    }

    // copy the generated build.zig file to build-aux directory
    const uf = b.addUpdateSourceFiles();
    uf.addCopyFileToSource(out_dir.path(b, "build.zig"), "build-aux/generated/build.zig");

    updateStep.dependOn(&uf.step);
}
